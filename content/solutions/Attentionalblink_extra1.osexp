---
API: 2.1
OpenSesame: 3.3.12
Platform: nt
---
set width 1024
set uniform_coordinates yes
set title "Attentional blink"
set subject_parity even
set subject_nr 0
set start experiment
set sound_sample_size -16
set sound_freq 48000
set sound_channels 2
set sound_buf_size 1024
set sampler_backend psycho
set round_decimals 2
set mouse_backend psycho
set keyboard_backend psycho
set height 768
set fullscreen no
set form_clicks no
set foreground black
set font_underline no
set font_size 32
set font_italic no
set font_family mono
set font_bold no
set experiment_path "C:\\Users\\Gebruiker\\Documents\\Teaching_AY2223_S2\\Experimentation\\OpenSesame_Exercises\\s9_attentional_blink"
set disable_garbage_collection yes
set description "A template containing a practice and an experimental phase"
set coordinates uniform
set compensation 0
set color_backend psycho
set clock_backend psycho
set canvas_backend psycho
set bidi yes
set background gray

define inline_script RSVP
	set description "Executes Python code"
	___run__
	# creat two lists with timestamps: l_letter_time and l_blank_time
	l_letter_time = []
	l_blank_time = []
	for letter_canvas in letter_canvas_list:
	    t1 = letter_canvas.show()
	    l_letter_time.append(t1)
	    clock.sleep(var.letter_dur)
	    t2 = blank_canvas.show()
	    l_blank_time.append(t2)
	    clock.sleep(var.isi)
	    
	# convert list to array to enable numerical computations
	import numpy
	a_letter_time = numpy.array(l_letter_time)
	a_blank_time = numpy.array(l_blank_time)
	
	# create a new array, a_letter_dur, in which each item is the result of subtracting the corresponding item in a_letter_time from the corresponding item in a_blank_time
	a_letter_dur = a_blank_time - a_letter_time
	
	# create a new array, a_blank_dur, in which each item is the result of subtracting item i in a_blank_time from item i+1 in a_letter_time
	a_blank_dur = a_letter_time[1:] - a_blank_time[:-1]
	
	# use the array.mean() and array.std() methods to get the averages and standard deviations of the durations in one go
	var.mean_letter_dur = a_letter_dur.mean()
	var.std_letter_dur = a_letter_dur.std()
	var.mean_blank_dur = a_blank_dur.mean()
	var.std_blank_dur = a_blank_dur.std()
	__end__
	___prepare__
	import random
	import string
	
	# The color of T1
	var.T1_color = 'white'
	# The presentation time of each stimulus
	# (rounded up to nearest value compatible with refresh rate)
	var.letter_dur = 10
	# The inter-stimulus interval
	# (rounded up to nearest value compatible with refresh rate)
	var.isi = 70
	
	# The position of T1 is random between 7 and 15. Note that the first position is
	# 0, so the position indicates the number of preceding stimuli.
	var.T1_pos = random.randint(7, 15)
	# The maximum lag, i.e. the number of letters that follow T1.
	var.max_lag = 8
	# The length of the stream is the position of T1 + the maximum lag + 1. We need
	# to add 1, because we count starting at 0, so the length of a list is always
	# 1 larger than its maximum index.
	var.stream_len = var.T1_pos + var.max_lag + 1
	# We take all uppercase letters, which have been predefined in the `string`
	# module. Converting to a `list` creates a list of characters.
	letters = list(string.ascii_uppercase)
	# We remove 'X' from this list.
	letters.remove('X')
	# Randomly sample a `stream_len` number of letters
	stim_list = random.sample(letters, var.stream_len)
	
	if var.T2_present == 'y':
	    var.T2_pos = var.T1_pos + var.lag
	    stim_list[var.T2_pos] = 'X'
	    
	# Create an empty list for the canvas objects.
	letter_canvas_list = []
	# Loop through all letters in `stim_list`. `enumerate()` is a convenient
	# function that automatically returns (index, item) tuples. In our case, the
	# index (`i`) reflects the position in the RSVP stream. This Python trick, in
	# which you assign a single value to two variables, is called tuple unpacking.
	for i, stim in enumerate(stim_list):
	    # Create a `canvas` object.
	    letter_canvas = canvas()
	    # If we are at the position of T1, we change the foreground color, because
	    # T1 is white, while the default color (specified in the General tab) is
	    # black.
	    if i == var.T1_pos:
	        letter_canvas.set_fgcolor(var.T1_color)
	    # Draw the letter!
	    letter_canvas.text(stim)
	    # And add the canvas to the list.
	    letter_canvas_list.append(letter_canvas)
	    
	blank_canvas = canvas()
	
	
	# Extract T1 from the list
	var.T1 = stim_list[var.T1_pos]
	__end__

define sketchpad ask_T1
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=yes font_family=mono font_italic=no font_size=32 html=yes show_if=always text="Please type the white letter" x=0 y=0 z_index=0

define sketchpad ask_T2
	set duration 0
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=yes font_family=mono font_italic=no font_size=32 html=yes show_if=always text="Did you see an X? (y/n)" x=0 y=0 z_index=0

define loop block_loop
	set source_file ""
	set source table
	set skip 0
	set repeat "[block_repeat]"
	set order random
	set offset no
	set item trial_sequence
	set description "A single block of trials"
	set cycles 18
	set continuous no
	set column_order ""
	set break_if_on_first yes
	set break_if never
	setcycle 0 lag 0
	setcycle 0 T2_present y
	setcycle 1 lag 1
	setcycle 1 T2_present y
	setcycle 2 lag 2
	setcycle 2 T2_present y
	setcycle 3 lag 3
	setcycle 3 T2_present y
	setcycle 4 lag 4
	setcycle 4 T2_present y
	setcycle 5 lag 5
	setcycle 5 T2_present y
	setcycle 6 lag 6
	setcycle 6 T2_present y
	setcycle 7 lag 7
	setcycle 7 T2_present y
	setcycle 8 lag 8
	setcycle 8 T2_present y
	setcycle 9 lag ""
	setcycle 9 T2_present n
	setcycle 10 lag ""
	setcycle 10 T2_present n
	setcycle 11 lag ""
	setcycle 11 T2_present n
	setcycle 12 lag ""
	setcycle 12 T2_present n
	setcycle 13 lag ""
	setcycle 13 T2_present n
	setcycle 14 lag ""
	setcycle 14 T2_present n
	setcycle 15 lag ""
	setcycle 15 T2_present n
	setcycle 16 lag ""
	setcycle 16 T2_present n
	setcycle 17 lag ""
	setcycle 17 T2_present n
	run trial_sequence

define sequence block_sequence
	set flush_keyboard yes
	set description "A sequence containing a single block of trials followed by feedback to the participant"
	run instructions_experimental "[condition] = experimental"
	run instructions_control "[condition] = control"
	run reset_feedback always
	run block_loop always
	run feedback always

define inline_script counterbalance
	set description "Executes Python code"
	set _run ""
	___prepare__
	if var.subject_parity == 'even':
	    var.condition1 = 'experimental'
	    var.condition2 = 'control'
	else:
	    var.condition1 = 'control'
	    var.condition2 = 'experimental'
	__end__

define sketchpad end_of_experiment
	set start_response_interval no
	set duration keypress
	set description "A sketchpad notifying the participant that the experiment is finished"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="Press any key to exit" x=0 y=0 z_index=0

define sketchpad end_of_practice
	set start_response_interval no
	set duration keypress
	set description "A sketchpad notifying the participant that the practice phase is finished"
	draw textline center=1 color=white font_bold=no font_family=mono font_italic=no font_size=18 html=yes show_if=always text="Press any key to continue" x=0 y=0 z_index=0

define sequence experiment
	set flush_keyboard yes
	set description "The main sequence of the experiment"
	run counterbalance always
	run instructions always
	run practice_loop always
	run end_of_practice always
	run experimental_loop always
	run end_of_experiment always

define loop experimental_loop
	set source_file ""
	set source table
	set skip 0
	set repeat 10
	set order sequential
	set offset no
	set item block_sequence
	set description "A loop containing one or more experimental blocks"
	set cycles 10
	set continuous no
	set column_order practice
	set break_if_on_first yes
	set break_if never
	setcycle 0 practice no
	setcycle 0 condition "[condition1]"
	setcycle 0 block_repeat 2
	setcycle 1 practice no
	setcycle 1 condition "[condition1]"
	setcycle 1 block_repeat 2
	setcycle 2 practice no
	setcycle 2 condition "[condition1]"
	setcycle 2 block_repeat 2
	setcycle 3 practice no
	setcycle 3 condition "[condition1]"
	setcycle 3 block_repeat 2
	setcycle 4 practice no
	setcycle 4 condition "[condition1]"
	setcycle 4 block_repeat 2
	setcycle 5 practice no
	setcycle 5 condition "[condition2]"
	setcycle 5 block_repeat 2
	setcycle 6 practice no
	setcycle 6 condition "[condition2]"
	setcycle 6 block_repeat 2
	setcycle 7 practice no
	setcycle 7 condition "[condition2]"
	setcycle 7 block_repeat 2
	setcycle 8 practice no
	setcycle 8 condition "[condition2]"
	setcycle 8 block_repeat 2
	setcycle 9 practice no
	setcycle 9 condition "[condition2]"
	setcycle 9 block_repeat 2
	run block_sequence

define feedback feedback
	set reset_variables yes
	set duration keypress
	set description "Provides feedback to the participant"
	draw textline center=1 color="#000000" font_bold=yes font_family=mono font_italic=no font_size=32 html=yes show_if=always text="End of block" x=0 y=-96 z_index=0
	draw textline center=1 color="#000000" font_bold=no font_family=mono font_italic=no font_size=32 html=yes show_if=always text="You accuracy was [acc] %<br /><br /><br />Press any key to continue" x=-5 y=59 z_index=0

define sketchpad fixation
	set start_response_interval no
	set duration 995
	set description "Displays stimuli"
	draw fixdot color="#000000" show_if=always style=default x=0 y=0 z_index=0

define sketchpad instructions
	set start_response_interval no
	set duration keypress
	set description "A sketchpad containing the instructions for the participant"
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=32 html=yes show_if=always text="Press any key to begin!" x=0 y=0 z_index=0

define sketchpad instructions_control
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=32 html=yes show_if=always text="INSTRUCTIONS<br /><br />You will see a series of letters. Please report<br /><br />" x=0 y=-96 z_index=0
	draw textline center=1 color=black font_bold=yes font_family=mono font_italic=no font_size=32 html=yes show_if=always text="whether an 'X' was present<br />" x=0 y=32 z_index=0
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=32 html=yes show_if=always text="Press any key to begin..." x=0 y=160 z_index=0

define sketchpad instructions_experimental
	set duration keypress
	set description "Displays stimuli"
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=32 html=yes show_if=always text="INSTRUCTIONS<br /><br />You will see a series of letters. Please report<br />" x=0 y=-160 z_index=0
	draw textline center=1 color=black font_bold=yes font_family=mono font_italic=no font_size=32 html=yes show_if=always text="the identity of the white letter <br /><br />" x=32 y=0 z_index=0
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=32 html=yes show_if=always text=and x=0 y=32 z_index=0
	draw textline center=1 color=black font_bold=yes font_family=mono font_italic=no font_size=32 html=yes show_if=always text="whether an 'X' was present<br />" x=0 y=128 z_index=0
	draw textline center=1 color=black font_bold=no font_family=mono font_italic=no font_size=32 html=yes show_if=always text="Press any key to begin..." x=0 y=224 z_index=0

define logger logger
	set description "Logs experimental data"
	set auto_log yes

define loop practice_loop
	set source table
	set skip 0
	set repeat 2
	set order sequential
	set offset no
	set item block_sequence
	set description "A loop containing one or more practice blocks"
	set cycles 2
	set continuous no
	set column_order practice
	set break_if_on_first yes
	set break_if never
	setcycle 0 practice yes
	setcycle 0 condition "[condition1]"
	setcycle 0 block_repeat 0.5
	setcycle 1 practice yes
	setcycle 1 condition "[condition2]"
	setcycle 1 block_repeat 0.5
	run block_sequence

define reset_feedback reset_feedback
	set description "Resets the feedback variables, such as 'avg_rt' and 'acc'"

define keyboard_response response_T1
	set timeout infinite
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set correct_response "[T1]"

define keyboard_response response_T2
	set timeout infinite
	set flush yes
	set event_type keypress
	set duration keypress
	set description "Collects keyboard responses"
	set correct_response "[T2_present]"
	set allowed_responses "y;n"

define sequence trial_sequence
	set flush_keyboard yes
	set description "A single trial"
	run fixation always
	run RSVP always
	run ask_T1 "[condition] = experimental"
	run response_T1 "[condition] = experimental"
	run ask_T2 always
	run response_T2 always
	run logger always

